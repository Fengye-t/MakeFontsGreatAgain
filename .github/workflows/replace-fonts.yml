name: 自动替换字体并发布Release（修正版，7z解压）
on:
  push:
    tags:
      - '*'  # 匹配所有标签
  workflow_dispatch:  # 支持手动触发

jobs:
  replace-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 发布Release需要的权限
    
    steps:
      # 步骤1：检出仓库代码
      - name: 检出仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: true

      # 步骤2：获取并解压最新MFGA模块（使用7-Zip）
      - name: 下载并解压官方MFGA模块（7z）
        run: |
          # 1. 获取最新模块下载链接
          MODULE_URL=$(curl -s "https://api.github.com/repos/Fengye-t/MakeFontsGreatAgain/releases/latest" | \
                       jq -r '.assets[] | select(.name | endswith(".zip")) | .browser_download_url')
          
          if [ -z "$MODULE_URL" ] || [ "$MODULE_URL" = "null" ]; then
            echo " 错误：无法获取官方模块下载链接"
            exit 1
          fi
          echo " 获取到模块下载链接：$MODULE_URL"
          
          # 2. 下载模块
          wget -O mfga-module.zip "$MODULE_URL"
          if [ ! -f "mfga-module.zip" ] || [ $(stat -c%s "mfga-module.zip") -lt 1024 ]; then
            echo " 错误：模块下载失败或文件太小"
            exit 1
          fi
          
          # 3. 安装7-Zip
          sudo apt-get update && sudo apt-get install -y p7zip-full
          
          # 4. 用7z解压模块
          mkdir -p extracted-module
          7z x mfga-module.zip -oextracted-module
          
          # 5. 定位字体目录
          FONT_DIR=$(find extracted-module -type d -name "fonts" -path "*/system/fonts" | head -n1)
          if [ -z "$FONT_DIR" ]; then
            echo " 错误：未找到字体目录，解压结构："
            find extracted-module -type d | sort
            exit 1
          fi
          echo " 定位到字体目录：$FONT_DIR"
          echo "FONT_DIR=$FONT_DIR" >> $GITHUB_ENV

      # 步骤3：替换并删除目标字体文件
      - name: 处理字体文件（替换+删除）
        run: |
          # 要替换的字体列表
          FONTS_TO_REPLACE=("RobotoFlex-Regular.ttf" "Roboto-Regular.ttf" "Roboto-Italic.ttf")
          # 要删除的字体列表
          FONTS_TO_DELETE=("SysSans-En-Regular.ttf" "SysFont-Regular.ttf")
          
          # 复制要替换的字体到临时目录（假设仓库根目录有 custom-fonts 目录存放新字体）
          mkdir -p custom-fonts
          for font in "${FONTS_TO_REPLACE[@]}"; do
            if [ -f "custom-fonts/$font" ]; then
              cp "custom-fonts/$font" "${{ env.FONT_DIR }}/"
              echo " 已替换字体：$font"
            else
              echo "️ 警告：自定义字体 custom-fonts/$font 不存在，跳过替换"
            fi
          done
          
          # 删除指定字体
          for font in "${FONTS_TO_DELETE[@]}"; do
            if [ -f "${{ env.FONT_DIR }}/$font" ]; then
              rm "${{ env.FONT_DIR }}/$font"
              echo " 已删除字体：$font"
            else
              echo "️ 提示：字体 ${{ env.FONT_DIR }}/$font 不存在，无需删除"
            fi
          done

      # 步骤4：构建更新包
      - name: 构建MFGA更新包
        run: |
          # 1. 创建干净的构建目录
          BUILD_DIR="build-output"
          mkdir -p $BUILD_DIR
          
          # 2. 复制原始模块（保留目录结构）
          cp -R extracted-module/* $BUILD_DIR/
          
          # 3. 打包模块
          cd $BUILD_DIR
          zip -r ../MakeFontsGreatAgain-Updated.zip *
          cd ..
          
          # 4. 验证压缩包
          ZIP_SIZE=$(stat -c%s "MakeFontsGreatAgain-Updated.zip")
          if [ $ZIP_SIZE -lt 102400 ]; then
            echo " 错误：生成包大小异常 (${ZIP_SIZE}字节)"
            exit 1
          fi
          echo " 更新包生成成功 (大小: ${ZIP_SIZE}字节)"
          
          # 5. 列出关键文件验证
          unzip -l MakeFontsGreatAgain-Updated.zip | \
            grep -E 'META-INF|fonts/Roboto|module.prop|system/fonts'

      # 步骤5：发布更新包
      - name: 发布到GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: MakeFontsGreatAgain-Updated.zip
          tag_name: ${{ github.ref_name }}
          body: |
            ###  自动构建的MFGA更新包
            **包含以下修改：**
            - 已更新RobotoFlex-Regular.ttf、Roboto-Regular.ttf、Roboto-Italic.ttf字体
            - 已删除SysSans-En-Regular.ttf、SysFont-Regular.ttf字体
            - 保留原始模块所有功能
            - 构建时间: ${{ github.run_attempt }} @ ${{ github.run_id }}
          overwrite: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
